// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String             @id         @default(uuid())
  name                     String
  email                    String                         @unique
  createdAt                DateTime                       @default(now())

  // Project relations
  createdProjects          Project[]                      @relation("CreatedProjects")
  memberProjects           Project[]                      @relation("ProjectMembers")

  // Organization relations
  ownedOrganizations       Organization[]                 @relation("OrganizationOwner")
  memberOrganizations      Organization[]                 @relation("OrganizationMembers")

  // Chat relation
  chats                    Chat[]
}

model Project {
  id                       Int              @id        @default(autoincrement())
  name                     String
  description              String                                                              @db.Text
  createdById              String
  createdAt                DateTime                       @default(now())
  deadline                 DateTime?
  organizationId           Int

  // User relations
  createdBy                User                           @relation("CreatedProjects", fields: [createdById], references: [id])
  members                  User[]                         @relation("ProjectMembers")

  // Organization relation
  organization             Organization                   @relation(fields: [organizationId], references: [id])

  // Chat relation
  chats                    Chat[]
}

model Organization {
  id                       Int               @id       @default(autoincrement())
  name                     String                         @unique
  ownerId                  String
  createdAt                DateTime                       @default(now())

  // User relations
  owner                    User                           @relation("OrganizationOwner", fields: [ownerId], references: [id])
  members                  User[]                         @relation("OrganizationMembers")

  // Project relation 
  projects                 Project[]                      
}

model Chat {
  id                       Int                  @id       @default(autoincrement())
  senderId                 String
  projectId                Int
  message                  String

  // User relation
  sender                   User                           @relation(fields: [senderId], references: [id])

  // Project relation
  project                  Project                        @relation(fields: [projectId], references: [id])
}

model Commit {
  commitId                 String               @id       @unique                             @db.Char(40)
  parentCommitId           String?                                                            @db.Char(40)
  author                   String                                                             @db.Char(255)
  commitMessage            String                                                             @db.Text
  commitData               DateTime                       @default(now())

  // Folder relation
  folders                  Folder[]

  // File relation
  files                    File[]

}

model Folder {
  folderId                 Int                  @id       @default(autoincrement())
  name                     String
  parentFolderId           Int?
  commitId                 String                                                             @db.Char(40)

  // Commit relation
  commit                   Commit                          @relation(fields: [commitId], references: [commitId])

  // File relation
  files                    File[]

  // Folder relation (for parent folder and sub folders)
  parentFolder             Folder?                         @relation("FolderHierarchy", fields: [parentFolderId], references: [folderId])
  subFolders               Folder[]                        @relation("FolderHierarchy")
}

model File {
  fileId                   Int                  @id       @default(autoincrement())
  name                     String
  folderId                 Int
  commitId                 String                                                             @db.Char(40)

  // Folder relation
  folder                   Folder                         @relation(fields: [folderId], references: [folderId])

  // Commit relation
  commit                   Commit                         @relation(fields: [commitId], references: [commitId])
}


// model User {
//   id              String   @id        @default(uuid())
//   name            String
//   username        String              @unique
//   role            String              @default("")
//   email           String
//   password        String
//   profileImg      String              @default("")
//   createdAt       DateTime            @default(now())

//   // references to Project
//   memberProjects       Project[]           @relation("ProjectMembers")
//   createdProjects         Project[]           @relation("CreatedProjects")

//   // references to Organization
//   ownersOf        Organization[]      @relation("OrganizationOwner")
//   membersofOrganization      Organization[]      @relation("OrganizationMembers")
// }

// model Project {
//   id              String    @id         @default(uuid())
//   title           String
//   description     String        @default("")
//   projectImg      String        @default("")
//   deadline        DateTime      @default(now()) // see this as it will show the started time as deadline
//   completion      String        @default("0")
//   //chats schema
//   createdById     String
//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @default(now())
//   membersId       String[]

//   // refereces to User
//   createdBy       User          @relation("CreatedProjects", fields: [createdById], references: [id])
//   // this members is not storing the members relational data in membersId, fix it
//   members         User[]        @relation("ProjectMembers")
// }

// model Organization {
//   id              String      @id           @default(uuid())
//   name            String          @unique
//   ownerId         String
//   createdAt       DateTime        @default(now())
//   membersId       String[]
//   projectsId      String[]

//   // references to User
//   owner           User      @relation("OrganizationOwner", fields: [ownerId], references: [id])
//   members        User[]    @relation("OrganizationMembers")

// }

